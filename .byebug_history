c
@checkpoint.description
c
@checkpoint
n
@current_checkpoint
@checkpoint
n
distance < 30
distance
n
distance
n
c
continue
exitn
n
@checkpoint
exit
@checkpoint
n
@current_checkpoint.id
@current_checkpoint
c
@checkpoint.id
n
c
n
c
n
checkpoint_id
@checkpoint_id
n
params
@checkpoint_id
c
@checkpoint_id
checkpoint_id
@checkpoint.id == @hunt.checkpoints.first.id
@checkpoint == @hunt.checkpoints.first.id
@checkpoint_id == @hunt.checkpoints.first.id
checkpoint_id == @hunt.checkpoints.first.id
n
checkpoint_id == @hunt.checkpoints.first.id
checkpoint_id == @hunt.checkpoints.first.idc
c
checkpoint_id == @hunt.checkpoints.first.idc
checkpoint_id == @hunt.checkpoints.first.id
@current_checkpoint
checkpoint_id
params[:check][:checkpoint_id]
@checkpoint
params
@checkpoint_id
@checkpoint
n
@checkpoint
n
@checkpoint
n
@checkpoint
@checkpoint.id == @hunt.checkpoints.first.id
c
n
@checkpoint.id == @hunt.checkpoints.first.id
@hunt.id
@checkpoint.id
@checkpoit.id
@checkpoint.id == @hunt.checkpoints.first
n
@checkpoint.id == @hunt.checkpoints.first
c
@checkpoint.id == @hunt.checkpoints.first
@checkpoint.id
n
c
@checkpoint
c
@hunt.checkpoints.first.id
n
@hunt.checkpoints.first.id
@hunt
params
@checkpoint_id
c
@checkpoint_id
c
nc
n
n 
n
@checkpoint
c
exit
params
Geocoder::Calculations.distance_between(loc_nav,loc_checkpoint, {units: :miles})
Geocoder::Calculations.distance_between(loc_nav,loc_checkpoint, units: :miles)
Geocoder::Calculations.distance_between(loc_nav,loc_checkpoint, units: :mile)
Geocoder::Calculations.distance_between(loc_nav,loc_checkpoint, units: :miles)
Geocoder::Calculations.distance_between(loc_nav,loc_checkpoint, units: :ml)
Geocoder::Calculations.distance_between(loc_nav,loc_checkpoint)
distance
c
distance
c
params
c
params
c
params
c
params
c
params
c
params
c
params[:check]
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
